<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    xmlns:internal="clr-namespace:MaterialDesignThemes.Wpf.Internal;assembly=MaterialDesignThemes.Wpf">
    <ControlTemplate x:Key="MaterialDesignValidationErrorTemplate">
            <ControlTemplate.Resources>
                <DataTemplate DataType="{x:Type ValidationError}">
                    <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}" TextBlock.FontSize="{Binding AdornedElement.(wpf:ValidationAssist.FontSize), ElementName=Placeholder}" HorizontalAlignment="{Binding AdornedElement.(wpf:ValidationAssist.HorizontalAlignment), ElementName=Placeholder}" MaxWidth="{Binding ActualWidth, ElementName=Placeholder}" Margin="2" TextWrapping="Wrap" Text="{Binding ErrorContent, Mode=OneTime}" UseLayoutRounding="false"/>
                </DataTemplate>
            </ControlTemplate.Resources>
            <StackPanel>
                <AdornedElementPlaceholder x:Name="Placeholder"/>
                <Border x:Name="DefaultErrorViewer" Background="{Binding AdornedElement.(wpf:ValidationAssist.Background), ElementName=Placeholder}" Margin="{Binding AdornedElement.Padding, Converter={StaticResource FloatingHintValidationErrorTextMarginConverter}, ElementName=Placeholder}" Visibility="Collapsed">
                    <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}" TextBlock.FontSize="{Binding AdornedElement.(wpf:ValidationAssist.FontSize), ElementName=Placeholder}" HorizontalAlignment="{Binding AdornedElement.(wpf:ValidationAssist.HorizontalAlignment), ElementName=Placeholder}" MaxWidth="{Binding ActualWidth, ElementName=Placeholder}" Margin="0,2" TextWrapping="Wrap" Text="{Binding CurrentItem.ErrorContent, Mode=OneTime}" UseLayoutRounding="false"/>
                </Border>
                <wpf:PopupEx x:Name="ValidationPopup" AllowsTransparency="True" IsOpen="False" Placement="{Binding AdornedElement.(wpf:ValidationAssist.PopupPlacement), ElementName=Placeholder}" PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}">
                    <Border x:Name="PopupBorder" Background="{Binding AdornedElement.(wpf:ValidationAssist.Background), ElementName=Placeholder}">
                        <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}" TextBlock.FontSize="{Binding AdornedElement.(wpf:ValidationAssist.FontSize), ElementName=Placeholder}" HorizontalAlignment="{Binding AdornedElement.(wpf:ValidationAssist.HorizontalAlignment), ElementName=Placeholder}" Margin="0,2" TextWrapping="Wrap" Text="{Binding CurrentItem.ErrorContent, Mode=OneTime}" UseLayoutRounding="false"/>
                    </Border>
                </wpf:PopupEx>
            </StackPanel>
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus), ElementName=Placeholder}" Value="False"/>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.UsePopup), ElementName=Placeholder}" Value="True"/>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.Suppress), ElementName=Placeholder}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="IsOpen" TargetName="ValidationPopup" Value="True"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus), ElementName=Placeholder}" Value="False"/>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.UsePopup), ElementName=Placeholder}" Value="False"/>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.Suppress), ElementName=Placeholder}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="DefaultErrorViewer" Value="Visible"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus), ElementName=Placeholder}" Value="True"/>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.UsePopup), ElementName=Placeholder}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="IsOpen" TargetName="ValidationPopup" Value="{Binding AdornedElement.IsKeyboardFocusWithin, ElementName=Placeholder, Mode=OneWay}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus), ElementName=Placeholder}" Value="True"/>
                        <Condition Binding="{Binding AdornedElement.(wpf:ValidationAssist.UsePopup), ElementName=Placeholder}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="DefaultErrorViewer" Value="{Binding AdornedElement.IsKeyboardFocusWithin, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=Placeholder, Mode=OneWay}"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding AdornedElement.(wpf:ValidationAssist.Background), ElementName=Placeholder}" Value="{x:Null}">
                    <Setter Property="Background" TargetName="DefaultErrorViewer" Value="{DynamicResource MaterialDesignPaper}"/>
                    <Setter Property="Background" TargetName="PopupBorder" Value="{DynamicResource MaterialDesignPaper}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding AdornedElement.(wpf:TextFieldAssist.HasOutlinedTextField), ElementName=Placeholder}" Value="True">
                    <Setter Property="Margin" TargetName="DefaultErrorViewer" Value="{Binding AdornedElement.Padding, Converter={StaticResource OutlinedValidationErrorTextMarginConverter}, ElementName=Placeholder}"/>
                    <Setter Property="VerticalOffset" TargetName="ValidationPopup" Value="2"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding AdornedElement.(wpf:TextFieldAssist.HasFilledTextField), ElementName=Placeholder}" Value="True">
                    <Setter Property="Margin" TargetName="DefaultErrorViewer" Value="{Binding AdornedElement.Padding, Converter={StaticResource OutlinedValidationErrorTextMarginConverter}, ElementName=Placeholder}"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="MaterialDesignCharacterCounterTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.FontSize" Value="10"/>
            <Setter Property="Margin" Value="0,0,16,0"/>
            <Setter Property="Opacity" Value="0.56"/>
            <Setter Property="Text">
                <Setter.Value>
                    <MultiBinding>
                        <Binding Converter="{StaticResource StringLengthValueConverter}" Path="Text" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TextBoxBase}}"/>
                        <Binding Path="MaxLength" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TextBoxBase}}"/>
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Visibility" Value="{Binding (wpf:TextFieldAssist.CharacterCounterVisibility), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"/>
        </Style>
        <Style x:Key="MaterialDesignHelperTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.FontSize" Value="{Binding (wpf:HintAssist.HelperTextFontSize), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <Setter Property="Opacity" Value="{Binding (wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            <Setter Property="Text" Value="{Binding (wpf:HintAssist.HelperText), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
        </Style>
        <Style x:Key="MaterialDesignFlatButton" TargetType="{x:Type ButtonBase}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="16,4,16,4"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Grid>
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding (wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ProgressBar x:Name="ProgressBar" Background="{Binding (wpf:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{Binding (wpf:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (wpf:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" Height="{TemplateBinding Height}" IsIndeterminate="{Binding (wpf:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (wpf:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding (wpf:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (wpf:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource MaterialDesignLinearProgressBar}" Value="{Binding (wpf:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Visibility="{Binding (wpf:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}">
                                <ProgressBar.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth"/>
                                        <Binding ElementName="border" Path="ActualHeight"/>
                                        <Binding ElementName="border" Path="CornerRadius"/>
                                        <Binding ElementName="border" Path="BorderThickness"/>
                                    </MultiBinding>
                                </ProgressBar.Clip>
                            </ProgressBar>
                            <wpf:Ripple ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <wpf:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth"/>
                                        <Binding ElementName="border" Path="ActualHeight"/>
                                        <Binding ElementName="border" Path="CornerRadius"/>
                                        <Binding ElementName="border" Path="BorderThickness"/>
                                    </MultiBinding>
                                </wpf:Ripple.Clip>
                            </wpf:Ripple>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding Foreground, ConverterParameter=0.16, Converter={StaticResource BrushOpacityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.38"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="TextBlock.FontSize" Value="14"/>
            <Setter Property="TextBlock.FontWeight" Value="Medium"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="wpf:ButtonAssist.CornerRadius" Value="2"/>
            <Setter Property="wpf:ButtonProgressAssist.IndicatorBackground" Value="Transparent"/>
            <Setter Property="wpf:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="wpf:ButtonProgressAssist.IsIndicatorVisible" Value="False"/>
            <Setter Property="wpf:ButtonProgressAssist.Opacity" Value=".4"/>
            <Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}"/>
        </Style>
        <Style x:Key="MaterialDesignToolButton" BasedOn="{StaticResource MaterialDesignFlatButton}" TargetType="{x:Type ButtonBase}">
            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}"/>
            <Setter Property="Padding" Value="4"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <wpf:Ripple ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.38"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="wpf:RippleAssist.ClipToBounds" Value="False"/>
            <Setter Property="wpf:RippleAssist.IsCentered" Value="True"/>
        </Style>
        <Style x:Key="ReadonlyTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Foreground" Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
            <Setter Property="Padding" Value="{x:Static wpf:Constants.TextBoxDefaultPadding}"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="SelectionBrush" Value="{DynamicResource PrimaryHueLightBrush}"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid Cursor="{TemplateBinding Cursor, Converter={StaticResource ArrowCursorConverter}}">
                            <Border Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" CornerRadius="{TemplateBinding}" HorizontalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch" Visibility="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Border.RenderTransform>
                                    <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0"/>
                                </Border.RenderTransform>
                            </Border>
                            <AdornerDecorator>
                                <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <wpf:PackIcon x:Name="LeadingPackIcon" Grid.Column="0" Height="{TemplateBinding}" Kind="{TemplateBinding}" Margin="0,0,6,0" Opacity="{TemplateBinding}" VerticalAlignment="Center" Visibility="{TemplateBinding wpf:TextFieldAssist.HasLeadingIcon, Converter={StaticResource BooleanToVisibilityConverter}}" Width="{TemplateBinding}"/>
                                        <Grid x:Name="grid" Grid.Column="1" HorizontalAlignment="Stretch" MinWidth="1" VerticalAlignment="Center">
                                            <Grid Grid.Column="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" TextBlock.FontSize="{TemplateBinding FontSize}" Margin="0,0,2,0" Opacity="{TemplateBinding}" Text="{TemplateBinding}">
                                                    <TextBlock.Visibility>
                                                        <MultiBinding Converter="{StaticResource PrefixTextVisibilityConverter}">
                                                            <Binding ElementName="Hint" Path="IsHintInFloatingPosition"/>
                                                            <Binding Path="(wpf:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                        </MultiBinding>
                                                    </TextBlock.Visibility>
                                                </TextBlock>
                                                <ScrollViewer x:Name="PART_ContentHost" Cursor="{TemplateBinding Cursor, Converter={StaticResource IBeamCursorConverter}}" Grid.Column="1" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ScrollViewer.VerticalScrollBarVisibility="Hidden"/>
                                                <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" TextBlock.FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding}" Text="{TemplateBinding}"/>
                                            </Grid>
                                            <wpf:SmartHint x:Name="Hint" Grid.Column="0" FontFamily="{TemplateBinding FontFamily}" FloatingOffset="{TemplateBinding}" FontSize="{TemplateBinding FontSize}" FloatingScale="{TemplateBinding}" HintProxy="{Binding Converter={x:Static converters:HintProxyFabricConverter.Instance}, RelativeSource={RelativeSource TemplatedParent}}" HintOpacity="{TemplateBinding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" UseFloating="{TemplateBinding}">
                                                <wpf:SmartHint.Hint>
                                                    <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding Background}" CornerRadius="2">
                                                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding}"/>
                                                    </Border>
                                                </wpf:SmartHint.Hint>
                                            </wpf:SmartHint>
                                        </Grid>
                                        <wpf:PackIcon x:Name="TrailingPackIcon" Grid.Column="2" Height="{TemplateBinding}" Kind="{TemplateBinding}" Margin="4,0,0,0" Opacity="{TemplateBinding}" VerticalAlignment="Center" Visibility="{TemplateBinding wpf:TextFieldAssist.HasTrailingIcon, Converter={StaticResource BooleanToVisibilityConverter}}" Width="{TemplateBinding}"/>
                                        <Button x:Name="PART_ClearButton" Command="{x:Static internal:ClearText.ClearCommand}" Grid.Column="2" Focusable="False" Height="Auto" Padding="2,0,0,0" Style="{StaticResource MaterialDesignToolButton}">
                                            <Button.Visibility>
                                                <MultiBinding Converter="{StaticResource ClearButtonVisibilityConverter}">
                                                    <Binding Path="(wpf:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty"/>
                                                </MultiBinding>
                                            </Button.Visibility>
                                            <wpf:PackIcon Kind="CloseCircle" Margin="0"/>
                                        </Button>
                                    </Grid>
                                </Border>
                            </AdornerDecorator>
                            <Border x:Name="borderUnderline" Background="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding}" HorizontalAlignment="Stretch" Height="0" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Visibility="{TemplateBinding}"/>
                            <wpf:Underline x:Name="Underline" Background="{TemplateBinding}" CornerRadius="{TemplateBinding}" Visibility="{TemplateBinding}"/>
                            <Canvas VerticalAlignment="Bottom">
                                <Grid x:Name="FooterGrid" Width="{Binding ActualWidth, ElementName=border}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock x:Name="HelperTextTextBlock" Margin="{TemplateBinding Padding, Converter={StaticResource HelperTextMarginConverter}}" Style="{Binding (wpf:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Border x:Name="CharacterCounterContainer" Grid.Column="1">
                                        <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding (wpf:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Border>
                                </Grid>
                            </Canvas>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="wpf:HintAssist.IsFloating" Value="True"/>
                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Foreground" TargetName="Hint" Value="{Binding (wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter Property="HintOpacity" TargetName="Hint" Value="1"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="wpf:HintAssist.IsFloating" Value="True"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="FloatingOffset" TargetName="Hint">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Margin" TargetName="grid">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger>
                            <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                                <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}"/>
                            </Trigger>
                            <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="FloatingOffset" TargetName="Hint">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="HintOpacity" TargetName="Hint" Value="1"/>
                                <Setter Property="Opacity" TargetName="HintWrapper" Value="{Binding (wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter Property="Visibility" TargetName="Underline" Value="Collapsed"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True"/>
                                    <Condition Property="wpf:HintAssist.IsFloating" Value="True"/>
                                    <Condition Property="IsHintInFloatingPosition" SourceName="Hint" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="wpf:HintAssist.Background" Value="{DynamicResource MaterialDesignPaper}"/>
                                <Setter Property="Padding" TargetName="HintBackgroundBorder" Value="4,0"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True"/>
                                    <Condition Property="wpf:HintAssist.IsFloating" Value="True"/>
                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="HintWrapper" Value="1"/>
                            </MultiTrigger>
                            <DataTrigger Value="0">
                                <DataTrigger.Binding>
                                    <PriorityBinding>
                                        <Binding FallbackValue="0" Path="MaxLength" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Source="0"/>
                                    </PriorityBinding>
                                </DataTrigger.Binding>
                                <Setter Property="Visibility" TargetName="CharacterCounterContainer" Value="Collapsed"/>
                            </DataTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="PART_ClearButton" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                                <Setter Property="wpf:BottomDashedLineAdorner.IsAttached" TargetName="border" Value="True"/>
                                <Setter Property="Height" TargetName="borderUnderline" Value="0"/>
                                <Setter Property="Opacity" TargetName="grid" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="PART_ClearButton" Value="1"/>
                                <Setter Property="Opacity" TargetName="border" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                                <Setter Property="Height" TargetName="borderUnderline" Value="1"/>
                                <Setter Property="Opacity" TargetName="borderUnderline" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}"/>
                                <Setter Property="Opacity" TargetName="HintWrapper" Value="{Binding (wpf:HintAssist.HintOpacity), ConverterParameter={x:Static wpf:Constants.TextBoxNotEnabledOpacity}, Converter={StaticResource MathMultiplyConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter Property="Opacity" TargetName="PART_ClearButton" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                                <Setter Property="Opacity" TargetName="PART_ContentHost" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                                <Setter Property="Opacity" TargetName="PrefixTextBlock" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                                <Setter Property="Opacity" TargetName="SuffixTextBlock" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                    <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Height" TargetName="borderUnderline" Value="2"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False"/>
                                </MultiTrigger.Conditions>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False"/>
                                    <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="border" Value="0,0,0,2"/>
                                <Setter Property="Padding" TargetName="border" Value="0,4,0,3"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"/>
                                <Setter Property="Height" TargetName="borderUnderline" Value="1"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderThickness" Value="2"/>
                                <Setter Property="Margin" TargetName="border" Value="-1"/>
                            </MultiTrigger>
                            <Trigger Property="Validation.HasError" Value="true">
                                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                                <Setter Property="Background" TargetName="Underline" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Validation.HasError" Value="True"/>
                                    <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                                <Setter Property="BorderThickness" Value="2"/>
                                <Setter Property="Margin" TargetName="FooterGrid" Value="0,0,1,0"/>
                                <Setter Property="Margin" TargetName="border" Value="-1"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="internal:ClearText.HandlesClearCommand" Value="True"/>
            <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="wpf:HintAssist.HelperTextStyle" Value="{StaticResource MaterialDesignHelperTextBlock}"/>
            <Setter Property="wpf:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MaterialDesignCharacterCounterTextBlock}"/>
            <Setter Property="wpf:TextFieldAssist.CharacterCounterVisibility" Value="Visible"/>
            <Setter Property="wpf:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding (SpellCheck.IsEnabled), RelativeSource={RelativeSource Self}}"/>
            <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}"/>
        </Style>
</ResourceDictionary>